@page "/search"
@using MusicApp.Media
@inject IMediaService MusicService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using System.Collections;
@using System.Collections.Generic;
@using System.Linq;


<PageTitle>Search Page</PageTitle>


<div class="main-content">
<div class="searchbar">
    <input class="search-input" @bind-value="searchText" @bind-value:event="oninput" placeholder="search music" />
    <button class="search-button" @onclick="PerformSearch" id="search-button"><i class='bx bx-search'></i></button>
</div>

@if (searchResults != null && searchResults.Any())
{
    <ul>
        @foreach (var item in searchResults)
        {
            <li>
                <a href="javascript:;" @onclick="@(() => OpenMediaPlayer(item))" id="search-result">
                    @item.Title - @item.Subtitle
                </a>
            </li>
        }
    </ul>
}
</div>

@if (SelectedItem != null)
{
    <!-- Pop-up player content -->
    <div class="modal">
        <div class="modal-content">
            <span class="close" @onclick="@CloseMediaPlayer">&times;</span>

            <h2 class="modal_title">@SelectedItem.Title</h2>
            <audio controls autoplay data-autoplay="true"
                style="background: rgba(255, 255, 255, 0.2); border-radius: 16px; box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1); backdrop-filter: blur(5px); -webkit-backdrop-filter: blur(5px); border: 1px solid rgba(255, 255, 255, 0.3);">
                <source src="@SelectedItem.MusicUri" type="audio/mp4">
            </audio>
        </div>
    </div>
}


@code {
    private string searchText;
    private List<MusicItem> Media { get; set; }
    private List<MusicItem> searchResults;


    private async Task PerformSearch()
    {
        searchResults = await MusicService.Search(searchText);
        Console.WriteLine($"Search results: {System.Text.Json.JsonSerializer.Serialize(searchResults)}");
    }

    private void DisplayItem(MusicItem item)
    {
        // Navigate to /search page with the selected item's information
        if (item != null)
        {
            var uri = NavigationManager.ToAbsoluteUri($"/search?title={Uri.EscapeDataString(item.Title)}&subtitle={Uri.EscapeDataString(item.Subtitle)}");
            NavigationManager.NavigateTo(uri.ToString());
        }
    
    }
    
    // Track the selected item for the pop-up player
    public MusicItem SelectedItem { get; set; }

    // Method to handle item click and open the pop-up player
    private void OpenMediaPlayer(MusicItem item)
    {
        SelectedItem = item;
    }

    // Method to close the pop-up player
    private void CloseMediaPlayer()
    {
        SelectedItem = null;
    }


    
}




<style>
    .search-box {
        display: block;
        background: red;
    }

    .search-box input[type="text"] {
        width: 200px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
       
    }

    .search-box ul {
        position: absolute;
        top: 30px;
        left: 0;
        right: 0;
        z-index: 999;
        background-color: #fff;
        border: 1px solid #ccc;
        border-top: none;
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .search-box li {
        padding: 5px;
        cursor: pointer;
    }

    .search-box li:hover {
        background-color: #f2f2f2;
    }

    .searchbar{
    display: grid;
}

.search-input {
    border: 1px solid #ccc;
    padding: 5px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 20px;
    padding-left: 30px;
    font-size: 12px;
}


.search-button {
  background-color: transparent;
  color: #000;
  padding: 10px;
  cursor: pointer;
  border: none;
  position: absolute;
  align-self: start;
  justify-self: start;
  margin-top: -11px;
}

.search-button .bx {
  font-size: 16px;
}

</style>